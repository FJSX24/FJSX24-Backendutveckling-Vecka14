√ñvningar del 1:

üß© L√§tta √ñvningar (1-2)

1: Skapa en ny route som returnerar ditt namn:

Endpoint: /api/name

Response:
{ "name": "Ditt Namn" }

Tips: Anv√§nd res.json().
-------------------------------------------
2: Skicka en parameter i URL:en:

Endpoint: /api/greet/:name

Exempelanrop: /api/greet/Alice
/api/greet/mAndus

Response:
{ "message": "Hej Alice!" }
{ "message": "Hej mAndus!" }

Tips: Anv√§nd req.params.name.
-------------------------------------------
-------------------------------------------
-------------------------------------------
üîß Medelsv√•ra √ñvningar (3-4)

3: G√∂r en GET-route som h√§mtar data fr√•n ett objekt:

Objektet ska inneh√•lla information om n√•gra kurser:
const courses = [
  { id: 1, name: 'JavaScript Grundkurs' },
  { id: 2, name: 'Backend med Express' }
];

Endpoint: /api/courses

Response:
[
  { "id": 1, "name": "JavaScript Grundkurs" },
  { "id": 2, "name": "Backend med Express" }
]
-------------------------------------------
4: POST-request som tar emot data:

Endpoint: /api/add

Metod: POST

Inneh√•ll i body:
{ "title": "Ny kurs", "description": "L√§r dig mer om Express" }

Spara kursen i en array och returnera hela listan.
-------------------------------------------
-------------------------------------------
-------------------------------------------
üöÄ Sv√•ra √ñvningar (5-6)

5: Implementera en DELETE-route:

Endpoint: /api/courses/:id

Anv√§nd req.params f√∂r att hitta kursen med angivet ID och ta bort den.

Returnera den uppdaterade listan.
-------------------------------------------
6: Skapa en PUT-route som uppdaterar en kurs:

Endpoint: /api/courses/:id

Metod: PUT

Inneh√•ll i body:
{ "name": "Uppdaterad kurs" }

Uppdatera kursen med motsvarande ID och returnera den uppdaterade listan.
-------------------------------------------
-------------------------------------------
-------------------------------------------
üíæ Bonus: Middleware f√∂r Loggning

7:L√§gg till en middleware som loggar alla inkommande requests:
app.use((req, res, next) => {
    console.log(`${req.method} ${req.url}`);
    next();
});
-------------------------------------------
-------------------------------------------
-------------------------------------------
‚úÖ Reflektion och Avslutning
Hur k√§nns det att arbeta med Express?
Vilka utmaningar st√∂tte ni p√•?
Hur kan vi ut√∂ka API:et f√∂r att hantera mer komplex data?

-------------------------------------------
-------------------------------------------
-------------------------------------------
F√∂r de som blir klar tidigt och vill avancera:

üî• √ñvning 7: Returnera olika statuskoder beroende p√• anv√§ndarinmatning
Uppgift:
Skapa en POST-endpoint d√§r anv√§ndaren skickar in sitt namn. Om namnet √§r l√§ngre √§n 2 tecken, returnera en "success"-respons med statuskod 200. Om namnet √§r f√∂r kort, returnera en felrespons med statuskod 400 och ett felmeddelande.

Endpoint: /api/validate-name
Metod: POST
Body:
{ "name": "Bo" }

Response exempel ‚Äì OK:
{ "message": "Hej Bo!" }
Status: 200

Response exempel ‚Äì Error:
{ "error": "Namnet m√•ste vara minst 3 tecken l√•ngt" }
Status: 400

Tips:

Anv√§nd if-sats f√∂r att kolla l√§ngd p√• req.body.name.

Anv√§nd res.status(400).json() vid fel.

-------------------------------------------
‚≠ê √ñvning 8: Filtrera kurser med query-parametrar

Uppgift:
Ut√∂ka /api/courses-endpointen s√• att man kan filtrera kurser med en query parameter. Om ingen parameter skickas med, returnera hela listan. Om en parameter skickas, returnera bara kurser som matchar.

Exempel-URL:
/api/courses?search=JavaScript

Exempeldata:
const courses = [
  { id: 1, name: 'JavaScript Grundkurs' },
  { id: 2, name: 'Backend med Express' },
  { id: 3, name: 'React med Hooks' }
];

Exempelrespons ‚Äì vid ?search=React:
[
  { "id": 3, "name": "React med Hooks" }
]

Exempelrespons ‚Äì vid ?search= eller utan query:
[
  { "id": 1, "name": "JavaScript Grundkurs" },
  { "id": 2, "name": "Backend med Express" },
  { "id": 3, "name": "React med Hooks" }
]


-------------------------------------------
-------------------------------------------
-------------------------------------------
√ñvningar del 2:

Sj√§lvst√§ndiga √ñvningar

üß© L√§tta (3 st):
1: Skapa en route /api/status som returnerar:

{ "status": "OK" }

---------------------------------------------
2: Skapa en route /api/greet som tar ett namn som query-param och svarar med:

{ "message": "Hej, Alice!" }

---------------------------------------------
3: Skapa en route /api/echo som returnerar alla headers.
---------------------------------------------
---------------------------------------------
---------------------------------------------
üîß Medel (3 st):
1: Skapa en PATCH-route f√∂r att uppdatera en anv√§ndare.
---------------------------------------------

2: Implementera en middleware som loggar alla inkommande requests. (Frivillig, middleware kommer vi prata mer om.)
---------------------------------------------

3: Skapa en enkel databas i JSON-format och anv√§nd den i en GET-route.
---------------------------------------------
---------------------------------------------
---------------------------------------------

üöÄ Sv√•ra (3 st):
1: Implementera ett autentiseringssystem med en header Authorization. (Frivillig, middleware kommer vi prata mer om.)
---------------------------------------------

2: Bygg en CRUD-app med anv√§ndare/husdjur/bilar/tv-spel.
---------------------------------------------

3: L√§gg till validering av inkommande data.
---------------------------------------------