Introduktion till API:er och Express.js

Syfte: F√∂rst√• grundl√§ggande koncept kring API:er, HTTP-metoder, klient-server-modellen och hur man skapar en enkel server med Express.js.

Del 2: F√∂rst√• hur man hanterar request och response i Express, anv√§nda query- och path-params, samt arbeta med headers och statuskoder.
Verktyg: Express.js, Postman

------------------------------------------------------------
üìù Lektionsplanering:

Agenda:

Teori/PP

Code-Along  - Skapa en f√∂rsta server med Express.js och en GET-route.

Sj√§lvst√§ndig √∂vningar.

Del 2: 
- PowerPoint & Teori:

- Code-Along
Skapa en Express-server med GET, POST, PUT, DELETE
Testa API:t i Postman

Sj√§lvst√§ndig √ñvningar

Avslutning och Reflektion 

------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
üí° Talarmanus och PowerPoint-inneh√•ll:
Introduktion:

Talarmanus:
"V√§lkomna! Idag ska vi l√§ra oss om API:er och hur vi anv√§nder Express.js f√∂r att skapa en enkel server. Vi kommer √§ven att titta p√• HTTP-metoder och f√∂rst√• hur klient-server-modellen fungerar."

------------------------------------------------------------
Slide 1: Vad √§r ett API?
Text p√• sliden:

API st√•r f√∂r Application Programming Interface.

Ett s√§tt f√∂r program att kommunicera med varandra.

Exempel: En v√§derapp h√§mtar data fr√•n SMHI:s API.

Talarmanus:
"Ett API, eller Application Programming Interface, √§r en mekanism som g√∂r det m√∂jligt f√∂r olika program att kommunicera med varandra. T√§nk er att ni har en v√§derapp p√• telefonen. Den m√•ste h√§mta v√§derdata n√•gonstans ifr√•n, och det g√∂r den via ett API som SMHI tillhandah√•ller. P√• s√• s√§tt kan appen visa v√§derdata utan att beh√∂va lagra allt sj√§lv."

------------------------------------------------------------
Slide 3: Vad g√∂r ett API?
Text p√• sliden:

Tillhandah√•ller en strukturerad metod f√∂r datautbyte.

M√∂jligg√∂r kommunikation mellan frontend och backend.

API:er anv√§nds f√∂r att l√§sa, skriva, uppdatera och radera data.

Talarmanus:
"API:er g√∂r det m√∂jligt f√∂r olika system att utbyta data p√• ett strukturerat s√§tt. N√§r vi bygger en webbsida med en frontend och en backend s√• anv√§nder vi API:er f√∂r att skicka data fram och tillbaka. Det kan handla om att h√§mta data fr√•n en databas, uppdatera anv√§ndarinformation eller radera gamla poster."

------------------------------------------------------------
Slide 4: API-arkitektur
Text p√• sliden:

Olika API-arkitekturer har sina egna f√∂r- och nackdelar beroende p√• behov av prestanda, s√§kerhet och komplexitet.

SOAP (Simple Object Access Protocol)

GraphQL

JSON-RPC

XML-RPC

REST

Talarmanus:
"Det finns m√•nga olika s√§tt att bygga API:er, och vilket som √§r b√§st beror p√• behovet. SOAP √§r v√§ldigt strikt och anv√§nds ofta i stora f√∂retag d√§r s√§kerhet √§r avg√∂rande. GraphQL √§r flexibelt och anv√§nds n√§r man beh√∂ver precis kontroll √∂ver vilka data som h√§mtas. REST √§r d√§remot v√§ldigt vanligt eftersom det √§r enkelt och fungerar bra f√∂r m√•nga olika typer av applikationer."

------------------------------------------------------------
Slide 5: REST API
Text p√• sliden:

REST - Representational State Transfer

REST √§r en arkitekturstil som anv√§nder HTTP-metoder f√∂r att kommunicera med resurser.

GET, POST, PUT, DELETE.

Talarmanus:
"REST API:er anv√§nder HTTP-metoder f√∂r att interagera med resurser. Vi anv√§nder GET f√∂r att l√§sa data, POST f√∂r att skapa, PUT f√∂r att uppdatera och DELETE f√∂r att ta bort. REST √§r en popul√§r metod eftersom det √§r enkelt att implementera och l√§tt att f√∂rst√•."

------------------------------------------------------------
Slide 6: REST API - Forts√§ttning
Text p√• sliden:

Standard/mest vanliga API-arkitekturen.

Tydlig struktur och enkel att anv√§nda.

URL:en inneh√•ller all n√∂dv√§ndig data.

Talarmanus:
"REST √§r den mest anv√§nda API-arkitekturen eftersom den √§r standardiserad och enkel att f√∂rst√•. N√§r vi skickar en f√∂rfr√•gan till en REST-API, s√• b√§r sj√§lva URL:en med sig all data som beh√∂vs f√∂r att servern ska kunna behandla f√∂rfr√•gan."

------------------------------------------------------------
Slide 7: REST API - F√∂rdelar
Text p√• sliden:

Tydligare uppdelning mellan frontend och backend.

Plattformsoberoende.

URL:er fungerar lika oavsett plattform.

Talarmanus:
"En av de stora f√∂rdelarna med REST √§r att frontend och backend √§r separerade fr√•n varandra. Detta g√∂r det m√∂jligt att ha olika klienter, som mobilappar eller webbplatser, som anv√§nder samma API. Dessutom fungerar URL:erna p√• samma s√§tt oavsett om klienten k√∂rs p√• Windows, Linux, Android eller iOS."

------------------------------------------------------------
Slide 8: Stateless
Text p√• sliden:

Servern har inget "minne".

Varje f√∂rfr√•gan √§r oberoende av tidigare interaktioner.

Talarmanus:
"En viktig princip i REST √§r att det √§r stateless. Det betyder att servern inte har n√•got 'minne' mellan f√∂rfr√•gningar. Varje f√∂rfr√•gan m√•ste b√§ra med sig all information som beh√∂vs f√∂r att behandlas. Detta g√∂r det enkelt att skala upp systemet eftersom servern inte beh√∂ver h√•lla reda p√• varje anv√§ndares tillst√•nd."

------------------------------------------------------------
Slide 9: Uniform design
Text p√• sliden:

REST ser likadan ut √∂verallt.

Talarmanus:
"En av styrkorna med REST √§r dess uniforma design. Detta inneb√§r att API:er byggda enligt REST-konceptet ser likadana ut oavsett vilken plattform de anv√§nds p√•. Det g√∂r det enkelt att f√∂rst√• och jobba med."

------------------------------------------------------------
Slide 10: HTTP-metoder
Text p√• sliden:

GET - H√§mta data

POST - Skicka data

PUT - Uppdatera data

DELETE - Ta bort data

PATCH - Delvis uppdatera data

Talarmanus:
"HTTP-metoderna √§r byggstenarna f√∂r att kommunicera med ett REST-API. GET anv√§nds f√∂r att l√§sa data, POST f√∂r att skapa ny data, PUT f√∂r att uppdatera hela objekt, DELETE f√∂r att ta bort och PATCH f√∂r att uppdatera delar av ett objekt."

------------------------------------------------------------
Slide 11: Klient-server-modellen
Text p√• sliden:

Klient: Webbl√§sare, mobilapp, annan tj√§nst

Server: Hanterar requests och skickar svar

Kommunikation via HTTP

Talarmanus:
"I klient-server-modellen skickar klienten en f√∂rfr√•gan till servern, som behandlar den och skickar tillbaka ett svar. Kommunikation sker via HTTP, vilket g√∂r det m√∂jligt att anv√§nda samma API p√• flera olika typer av enheter."

------------------------------------------------------------
Slide 12: Express.js - The Pitch
Text p√• sliden:

Ett snabbt, minimalistiskt ramverk f√∂r Node.js.

Talarmanus:
"Express √§r ett ramverk ovanp√• Node.js som g√∂r det enkelt att bygga webbapplikationer och API:er. Det √§r snabbt och minimalistiskt, men erbjuder √§nd√• massor av funktioner som routing och middleware-hantering."

------------------------------------------------------------
Slide 13: Vad betyder det?
Text p√• sliden:

Minimalistiskt ramverk ovanp√• Node.js.

Ger ett antal funktioner f√∂r routing och hantering.

Talarmanus:
"Express √§r ett mycket flexibelt ramverk som ger oss m√∂jlighet att hantera HTTP-f√∂rfr√•gningar p√• ett enkelt s√§tt. Vi kan snabbt s√§tta upp en server med olika endpoints och anv√§nda middleware f√∂r att hantera data."

------------------------------------------------------------
Slide 14: Express Grunder
Text p√• sliden:

app.get(), app.post() f√∂r HTTP-metoder

req.params, req.query

res.status(200).json({})

Talarmanus:
"De vanligaste metoderna i Express √§r app.get() och app.post(), som anv√§nds f√∂r att hantera olika typer av f√∂rfr√•gningar. Vi kan ocks√• anv√§nda req.params och req.query f√∂r att hantera inkommande data."

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
Introduktion inf√∂r code along:

üó£Ô∏è Talarmanus - Introduktion Code Along:
"Nu ska vi tillsammans s√§tta upp v√•r f√∂rsta Express-server fr√•n grunden. Vi installerar Node.js och Express, sedan bygger och testar en enkel webbserver."

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
üíª Code-Along: Skapa en enkel Express-server
Installera Express.js
Skapa en mapp:

npm init -y
npm install express

Skapa en fil: index.js

Starta servern


Testa servern
√ñppna webbl√§saren och navigera till:

Root: http://localhost:3000/

API Endpoint: http://localhost:3000/api
-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
Dags f√∂r Sj√§lvst√§ndig √ñvningar del 1

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
Lektion del 2:

Syfte: F√∂rst√• hur man hanterar request och response i Express, anv√§nda query- och path-params, samt arbeta med headers och statuskoder.
Verktyg: Express.js, Postman

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
üìå Agenda:
PowerPoint & Teori
Request-objektet och dess egenskaper
Headers i Express
Response-objektet och dess egenskaper
HTTP-statuskoder
Query & Path Parameters
Request - params
Request - query
Anropa API:er (GET-request och anv√§ndning av request-modul)
Request / Response i Express

Code-Along 
Skapa en Express-server med GET, POST, PUT, DELETE
Testa API:t i Postman

Sj√§lvst√§ndig √ñvningar

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
üé§ PowerPoint & Teori

Introduktion

Rubrik: Request och Response i Express
Talarmanus:
"Idag ska vi dyka djupare in i hur vi hanterar requests och responses i Express. Vi ska √§ven l√§ra oss att anv√§nda parametrar, statuskoder och headers. Efter det kommer vi att skapa en komplett Express-server och testa den i Postman."

-------------------------------------------------
Slide 1: Request
Titel: Request
Text:

Request: Objektet inneh√•ller info om anropet fr√•n klienten till servern

Viktiga egenskaper:

URL: Inneh√•ller den efterfr√•gade URL:en fr√•n klienten

HTTP-metod: T.ex. GET, POST, DELETE osv.

Headers: Metadata om anropet (ex: Autentisering, content-type)

Query-parametrar och Body: Extra data som skickas med anropet (beroende p√• metod)

Talarmanus:
"Ett request-objekt inneh√•ller information om den f√∂rfr√•gan som skickas fr√•n klienten till servern. Det best√•r av en URL som specificerar resursen, en HTTP-metod som definierar typen av operation, headers som inneh√•ller metadata samt extra data som kan skickas med som antingen query-parametrar eller body."

------------------------------------------------
Slide 2: Headers i Express
Titel: Headers
Text:

Inneh√•ller metadata om f√∂rfr√•gan eller svaret

Vanliga headers:

Content-Type, Authorization, Accept

H√§mtas i Express med:
req.headers['content-type']

Talarmanus:
"Headers anv√§nds f√∂r att skicka metadata om f√∂rfr√•gan och svaret. Vi kan till exempel specificera att vi skickar JSON-data genom att s√§tta headern Content-Type till application/json. Headers kan √§ven inneh√•lla autentiseringsinformation eller annan metadata som servern beh√∂ver f√∂r att hantera f√∂rfr√•gan."

-------------------------------------------------
Slide 3: Response
Titel: Response
Text:

Response: Representerar svaret fr√•n servern till klienten

Viktiga egenskaper:

Statuskod: T.ex. 200 (OK), 404 (Not Found), 500 (Internal Server Error)

Headers: Metadata om svaret (t.ex. content-type)

Body: Det faktiska inneh√•llet i svaret (t.ex. HTML, JSON, text)

Talarmanus:
"Response-objektet √§r svaret fr√•n servern tillbaka till klienten. Det inneh√•ller en statuskod som indikerar om f√∂rfr√•gan lyckades, headers som skickar metadata om svaret och sj√§lva inneh√•llet, som kan vara i JSON-, HTML- eller textformat."

-------------------------------------------------
Slide 4: HTTP-statuskoder
Titel: HTTP-statuskoder
Text:

Fungerar som en notis fr√•n webbservern till klienten

Ber√§ttar f√∂r klienten hur beg√§ran gick

Exempel: 200 (OK), 404 (Not Found)

Talarmanus:
"HTTP-statuskoder √§r ett s√§tt f√∂r servern att ber√§tta f√∂r klienten hur en f√∂rfr√•gan gick. En kod som 200 OK betyder att allt gick bra, medan 404 Not Found betyder att resursen inte kunde hittas."

-------------------------------------------------
Slide 5: N√•gra vanliga statuskoder
Titel: N√•gra vanliga statuskoder
Text:

200 OK - Allt gick bra!

201 Created - Resurs skapad

400 Bad Request - Felaktig f√∂rfr√•gan

401 Unauthorized - Beh√∂righet saknas

404 Not Found - Resursen kunde inte hittas

500 Internal Server Error - Serverfel

Talarmanus:
"De vanligaste statuskoderna vi arbetar med √§r 200 OK f√∂r lyckade f√∂rfr√•gningar, 404 Not Found n√§r resursen inte kan hittas och 500 Internal Server Error om n√•got g√•r fel p√• servern. Det √§r viktigt att anv√§nda r√§tt kod f√∂r att klienten ska f√∂rst√• vad som h√§nde."

-------------------------------------------------
Slide 6: Query & Path Parameters
Titel: Query & Path Parameters
Text:

Query Params: /products?category=electronics (F√∂r filtrering och sortering)

Path Params: /products/123 (F√∂r att identifiera resurser)

Talarmanus:
"Query-parametrar anv√§nds ofta f√∂r filtrering eller s√∂kning, medan path-parametrar anv√§nds f√∂r att identifiera en specifik resurs. Dessa tv√• typer av parametrar hj√§lper till att g√∂ra API:erna flexibla och dynamiska."

-------------------------------------------------
Slide 7: Request - params
Kodexempel:

Talarmanus:
"Med path-parametrar kan vi f√•nga in variabler direkt fr√•n URL:en. I det h√§r exemplet f√•ngar vi in pj√§sen som efterfr√•gas via en URL-parameter och skickar tillbaka dess namn i svaret."

-------------------------------------------------
Slide 8: Request - query
Kodexempel:

Talarmanus:
"Query-parametrar skickas efter ett fr√•getecken i URL:en. Vi kan h√§mta dessa med req.query. Detta √§r anv√§ndbart n√§r vi vill skicka ytterligare information utan att inkludera det som en del av sj√§lva v√§gen."
-------------------------------------------------
Slide 9: Anropa API:er
Titel: Anropa API:er
Text:

G√•r att anv√§nda http-modulen och dess metod get

Externa bibliotek som request f√∂renklar processen

Talarmanus:
"Vi kan anropa API:er p√• olika s√§tt i Node.js. Ett s√§tt √§r att anv√§nda den inbyggda http-modulen, men det kan bli ganska mycket kod. Ett enklare alternativ √§r att anv√§nda ett bibliotek som request, vilket g√∂r det mer l√§sbart och enklare att anv√§nda."

-------------------------------------------------
Slide 10: HTTP GET
Kodexempel:

Talarmanus:
"Det h√§r exemplet visar hur vi anv√§nder den inbyggda http-modulen f√∂r att g√∂ra en GET-f√∂rfr√•gan. Vi l√§ser data i chunks och s√§tter ihop dem tills vi f√•r hela svaret. Det h√§r √§r bra om vi vill ha full kontroll, men som ni ser kan koden bli ganska r√∂rig."

-------------------------------------------------
Slide 11: Request
Kodexempel:

Talarmanus:
"Genom att anv√§nda biblioteket request kan vi g√∂ra samma sak med mycket mindre kod. H√§r g√∂r vi en GET-f√∂rfr√•gan och hanterar b√•de fel och svar med bara n√•gra f√• rader."

-------------------------------------------------
Slide 11: Request / Response i Express
Titel: Request / Response i Express
Text:

Request-objektet har f√∂ljande egenskaper:

url - Inneh√•ller URL:en f√∂r f√∂rfr√•gan

method - HTTP-metoden (t.ex. GET, POST, PUT, DELETE)

params - Inneh√•ller alla path-parametrar som skickas i URL:en

query - Inneh√•ller alla query-parametrar som skickas efter ? i URL:en

Response-objektet har f√∂ljande metoder:

send() - Skickar en respons i form av text, HTML eller annan data

sendFile() - Skickar en fil som respons till klienten

json() - Skickar JSON-data som respons

Talarmanus:
"I Express har vi tv√• huvudobjekt som vi anv√§nder n√§r vi hanterar inkommande f√∂rfr√•gningar och svarar p√• dem: req och res.
....................................
F√∂rst har vi Request-objektet (req):

Detta objekt representerar f√∂rfr√•gan som klienten skickar till servern och inneh√•ller massor av viktig information.

url - Detta f√§lt inneh√•ller sj√§lva URL:en som klienten efterfr√•gar, till exempel /api/users.

method - H√§r hittar vi HTTP-metoden som anv√§nds, som GET, POST, PUT, eller DELETE. Det hj√§lper oss att f√∂rst√• vilken typ av operation som f√∂rv√§ntas.

params - H√§r lagras alla path-parametrar som skickas med i URL:en. Om vi till exempel har en route som ser ut s√• h√§r:

app.get('/users/:id', (req, res) => {
    res.send(`Anv√§ndar-ID: ${req.params.id}`);
});

D√• kan vi anropa den med:

http://localhost:3000/users/5

Och det kommer att svara:
Anv√§ndar-ID: 5

query - Detta inneh√•ller alla query-parametrar som skickas efter fr√•getecknet i URL:en. Till exempel:

http://localhost:3000/users?name=Alice

D√• kan vi h√§mta name s√• h√§r:
req.query.name
......................................
Sedan har vi Response-objektet (res):

Detta objekt anv√§nds f√∂r att skicka tillbaka svar till klienten.

send() - Den h√§r metoden skickar tillbaka vanlig text eller HTML som respons.
app.get('/', (req, res) => {
    res.send('Hello World');
});

N√§r vi bes√∂ker rotadressen (/), kommer vi f√• texten "Hello World" som svar.

sendFile() - Om vi vill skicka tillbaka en fil, som en HTML- eller PDF-fil, anv√§nder vi sendFile().

res.sendFile(__dirname + '/index.html');

Detta √§r anv√§ndbart om vi vill servera statiska filer direkt fr√•n servern.

json() - N√§r vi vill skicka tillbaka data i JSON-format anv√§nder vi json().

res.json({ message: 'V√§lkommen!' });

Detta √§r v√§ldigt vanligt n√§r vi bygger API:er, eftersom klienten ofta f√∂rv√§ntar sig strukturerad data.


Sammanfattning:
"Genom att kombinera req och res kan vi b√•de h√§mta information fr√•n inkommande f√∂rfr√•gningar och skicka svar tillbaka. Genom att anv√§nda olika metoder och egenskaper i dessa objekt kan vi bygga dynamiska och flexibla API:er."

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
üíª Code-Along: Bygg en komplett API-server

üõ†Ô∏è Steg 1: Skapa projektet


mkdir express-api-v2
cd express-api-v2

npm init -y
npm install express

touch index.js

-------------------------------------------------
üõ†Ô∏è Steg 2: Skapa servern (index.js)

genomf√∂r den koden

-------------------------------------------------
‚úÖ Steg 3: Testa i Postman

üü¢ GET - H√§mta alla anv√§ndare

URL: http://localhost:3000/api/users

-------------------------------------------------
üü¢ GET - H√§mta en anv√§ndare

URL: http://localhost:3000/api/users/1

-------------------------------------------------
POST:

URL: http://localhost:3000/api/users

Body (JSON):

{ "name": "Charlie" }
{ "name": "Charlie", "age": 30 }

-------------------------------------------------
PUT:

URL: http://localhost:3000/api/users/1

Body (JSON):
{ "name": "Alice Uppdaterad" }

{ "name": "Alice Updated", "age": 28 }

-------------------------------------------------
DELETE:

URL: http://localhost:3000/api/users/1


-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
Dags f√∂r Sj√§lvst√§ndig √ñvningar del 2
