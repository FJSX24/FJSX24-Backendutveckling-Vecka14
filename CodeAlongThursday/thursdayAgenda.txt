üéØ Lektionsm√•l:
Efter lektionen ska studenterna:

F√∂rst√• krav f√∂rv√§ntningar f√∂r kursen och planeringen.

F√∂rst√• vad Node.js √§r, dess roll inom backend-utveckling och hur det anv√§nds.

S√§tta upp, k√∂ra och testa en enkel webbserver med Express.

Kunna s√§rskilja och f√∂rklara skillnaden mellan core-, egna- och externa moduler samt ES6-moduler.
------------------------------------------------------------
üìù Lektionsplanering:

Stina genomf√∂r kursutv√§rdering

Kursintroduktion och uppl√§gg

Presentation av kursplanen, kursplaneringen och examinationer.

Teori/PP: Node.js & Express.js √∂versikt

Code-Along: Installera och skapa en enkel Express-server 

Installera Node.js och kontrollera installationen via terminalen.

Skapa ett nytt Node.js-projekt med npm init -y.

Installera Express via npm.

Bygg en enkel Express-server som svarar "Hello World!" p√• en GET-f√∂rfr√•gan.

Demonstration av att k√∂ra och testa servern lokalt.

Sj√§lvst√§ndiga praktiska √∂vningar

------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
PP:

Slide 1: Titel
"V√§lkomna till dagens lektion! Idag b√∂rjar vi v√•r resa in i backendutveckling med Node.js. Vi ska f√∂rst√• vad Node.js √§r, hur det skiljer sig fr√•n traditionell JavaScript och hur vi kan anv√§nda moduler och paket."

Slide : Runtime environment
‚ÄùN√§r vi pratar om Node.js beskriver vi det ofta som en runtime environment. Det betyder helt enkelt en milj√∂ d√§r JavaScript-kod kan k√∂ras utanf√∂r webbl√§saren. Till skillnad fr√•n JavaScript som k√∂rs direkt i en webbl√§sare, kan Node.js hantera processer som webbservrar, s√§kerhetsfunktioner, filsystemhantering och annan backend-logik. Man kan s√§ga att Node.js erbjuder en milj√∂ d√§r JavaScript kan g√∂ra mycket mer √§n bara interagera med webbsidor.‚Äù

Slide 3: V8-motorn
"V8 √§r den motor som k√∂r JavaScript-kod i webbl√§saren Chrome, men den anv√§nds ocks√• i Node.js. Den g√∂r att JavaScript kan exekveras snabbt och l√•ter oss utveckla serverside-applikationer.."

Slide 4‚Äì5: Vart i stacken passar Node.js in?
"Node.js anv√§nds prim√§rt f√∂r backend-utveckling, d√§r vi hanterar databaser, API:er. I frontend har vi ist√§llet React, Vue eller Angular."

Slide 6: Skillnaden mellan Node.js och webbl√§sar-JS
"I webbl√§saren anv√§nds JavaScript f√∂r att manipulera HTML och CSS. Med Node.js kan vi jobba med filer, databaser och servrar."

üó£Ô∏è Talarmanus ‚Äì Slide: Non-blocking?
‚ÄùNode.js √§r non-blocking, vilket inneb√§r att systemet inte beh√∂ver v√§nta p√• att en process ska avslutas innan n√§sta kan p√•b√∂rjas.

F√∂rest√§ll dig att du har flera personer som vill √§ta mat. Ett blocking system inneb√§r att en person m√•ste √§ta klart innan n√§sta person kan b√∂rja √§ta. Det blir en l√•ngsam k√∂ och ineffektiv hantering.

Ett non-blocking system l√•ter ist√§llet alla √§ta samtidigt, utan att beh√∂va v√§nta p√• varandra. Node.js fungerar just p√• detta s√§tt; flera operationer, exempelvis filhantering, databasanrop och n√§tverkskommunikation, kan p√•g√• parallellt utan att blockera varandra.
Detta g√∂r att Node.js kan hantera m√•nga f√∂rfr√•gningar effektivt, √§ven om det √§r single-threaded.‚Äù



Slide 6B‚Äì9: Single Threaded & Event Loop
"Node.js √§r single-threaded, vilket betyder att den k√∂r en tr√•d √•t g√•ngen. Men tack vare asynkronitet kan den hantera m√•nga f√∂rfr√•gningar samtidigt ‚Äì ungef√§r som en korvkiosk d√§r servit√∂ren tar flera best√§llningar och skickar dem till k√∂ket."


üó£Ô∏è Talarmanus ‚Äì Slide: The Walk thru Korvkiosk (en Node.js-liknelse)
‚ÄùF√∂r att f√∂rst√• Node.js √§nnu b√§ttre ska vi anv√§nda en liknelse med en korvkiosk:

T√§nk er att vi har en korvkiosk med en enda person som arbetar vid kassan. Den h√§r personen representerar Node.js single-thread ‚Äì allts√• den enda tr√•den vi har att arbeta med.

Nu kommer flera kunder samtidigt och best√§ller korv. Om kassapersonen skulle vara blocking skulle hen ta emot en best√§llning, laga korven, ge den till kunden och f√∂rst d√§refter ta emot n√§sta best√§llning. Det h√§r skulle bli v√§ldigt l√•ngsamt.

Men med Node.js fungerar det ist√§llet s√• h√§r:
Kassapersonen tar snabbt emot en best√§llning och skickar vidare den till k√∂ket, som b√∂rjar tillaga korven. Under tiden kan kassapersonen ta emot fler best√§llningar fr√•n andra kunder. N√§r k√∂ket √§r klart med en korv, levereras den till kunden, utan att kassapersonen beh√∂vt st√• och v√§nta p√• att korven ska bli klar.

Precis s√• h√§r fungerar Node.js ‚Äì det tar emot m√•nga f√∂rfr√•gningar samtidigt, skickar iv√§g dem f√∂r hantering (till exempel databas eller filsystem), och g√•r direkt vidare med n√§sta f√∂rfr√•gan. N√§r svaret √§r klart levereras det tillbaka till anv√§ndaren.

P√• s√• vis kan Node.js effektivt hantera tusentals f√∂rfr√•gningar parallellt, trots att det bara finns en enda tr√•d (kassaperson).‚Äù

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
Introduktion inf√∂r code along:

üó£Ô∏è Talarmanus - Introduktion Code Along:
"Nu ska vi tillsammans s√§tta upp v√•r f√∂rsta Express-server fr√•n grunden. Vi installerar Node.js och Express, sedan bygger och testar en enkel webbserver."

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
Code along:

üîß Installation och Setup:

Kontrollera installation av Node.js:
node -v
npm -v

Initiera projekt och installera Express:
npm init -y
npm install express
Skapa filen server.js:
-------------------------------------------------
üìù Skapa filen server.js:

Genomf√∂r den koden.

Starta servern:

- Prata om lite olika s√§tt att starta servern:
node server.js
node --watch server.js
nodemon server.js

-------------------------------------------------
üìù Skapa filen fs-demo.js:

Genomf√∂r den koden.

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
Dags f√∂r Sj√§lvst√§ndig √ñvningar

-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
F√∂r onsdagens lektion:

Slide 13‚Äì17: Moduler i Node.js
"Node.js anv√§nder moduler f√∂r att organisera kod. Vi har:

Core-moduler: Inbyggda i Node.js (fs, http, path).

Egna moduler: V√•ra egna kodfiler.

Externa moduler: Installerade via npm."

Slide 18‚Äì19: Vad √§r NPM?
"NPM √§r Node Package Manager, en 'app store' f√∂r backend-moduler."


1Ô∏è‚É£3Ô∏è‚É£ Slide 13: Moduler i Node.js
Core-moduler (fs, http, path)

Egna moduler

Externa moduler (npm)

1Ô∏è‚É£4Ô∏è‚É£ Slide 14: Core-moduler - Path
Hanterar fil- och mapps√∂kv√§gar

1Ô∏è‚É£5Ô∏è‚É£ Slide 15: Path-modulen - Kodexempel
js
Kopiera
Redigera
const path = require('path');
console.log(path.join(__dirname, 'myfile.txt'));
1Ô∏è‚É£6Ô∏è‚É£ Slide 16: Egna moduler - Exportera & Importera
module.exports = function greeting(name) {...}

1Ô∏è‚É£7Ô∏è‚É£ Slide 17: Externa moduler och NPM
npm init -y

npm install express

1Ô∏è‚É£8Ô∏è‚É£ Slide 18: L√§sa & skriva filer med fs-modulen
fs.readFile(), fs.writeFile()

1Ô∏è‚É£9Ô∏è‚É£ Slide 19: Str√∂mmar & Pipe
Effektiv hantering av stora filer

2Ô∏è‚É£0Ô∏è‚É£ Slide 20: L√§sa och skriva filer - Exempel
js
Kopiera
Redigera
const fs = require('fs');
fs.readFile('text.txt', 'utf8', (err, data) => { console.log(data); });
2Ô∏è‚É£1Ô∏è‚É£ Slide 21: Let's Code!
Bild med texten: "Let's Code!"


üìÇ PowerPoint 2: "ES6 Moduler"
Filnamn: Vecka 1 √Ñmne_ Node.js & Moduler, _ ES6 Moduler.pptx Vecka 1 √Ñmne_ Node.js &‚Ä¶

üî¢ Fullst√§ndig lista √∂ver slides
1Ô∏è‚É£ Slide 1: Titel
Text: ES6 Moduler

Kontakt: mandus.lindstrom@zocom.se

2Ô∏è‚É£ Slide 2: Varf√∂r anv√§nda moduler?
Text:

En viktig del inom programmering √§r skalbarhet.

M√∂jligg√∂r att l√§gga till och ta bort kod utan att p√•verka andra delar av systemet.

3Ô∏è‚É£ Slide 3: Vad √§r en modul?
Sm√• JS-filer som √§r oberoende och √•teranv√§ndbara.

Grundl√§ggande f√∂r design patterns i JavaScript.

Inneh√•ller funktioner, variabler, event listeners etc.

Varje modul har sitt eget scope och kan inte n√•s fr√•n en annan modul utan export/import.

4Ô∏è‚É£ Slide 4: Modulstruktur i ett projekt
Diagram med en struktur av moduler i ett projekt

index.html

main.js

module.js

5Ô∏è‚É£ Slide 5: Import och Export - Grundl√§ggande syntax
Exempel: Exportera en funktion

js
Kopiera
Redigera
export default function myFunction() {
    console.log('Hej');
}
Exempel: Importera en funktion

js
Kopiera
Redigera
import myFunction from './module.js';
6Ô∏è‚É£ Slide 6: Named Export
Exempel: Exportera flera funktioner

js
Kopiera
Redigera
export function add(a, b) { return a + b; }
export function subtract(a, b) { return a - b; }
Exempel: Importera flera funktioner

js
Kopiera
Redigera
import { add, subtract } from './math.js';
7Ô∏è‚É£ Slide 7: Default Export
Exempel: Exportera en standardfunktion

js
Kopiera
Redigera
export default function greet(name) {
    return Hej, ${name}!;
}
Exempel: Importera en default-export

js
Kopiera
Redigera
import greet from './greet.js';
8Ô∏è‚É£ Slide 8: Minir√§knare - Exempel med moduler
operations.js

js
Kopiera
Redigera
export function sum(a, b) { return a + b; }
export function subtract(a, b) { return a - b; }
export function multiply(a, b) { return a * b; }
export function divide(a, b) { return a / b; }
main.js

js
Kopiera
Redigera
import { sum, subtract } from './operations.js';
console.log(sum(2, 3)); // 5
9Ô∏è‚É£ Slide 9: Alternativ import-syntax
Importera alla funktioner under ett alias

js
Kopiera
Redigera
import * as operations from './operations.js';
console.log(operations.sum(1, 2));
üîü Slide 10: type="module" i HTML

F√∂r att anv√§nda ES6-moduler i webbl√§saren m√•ste vi specificera type="module" i <script>-taggen:

html
Kopiera
Redigera
<script type="module" src="main.js"></script>
1Ô∏è‚É£1Ô∏è‚É£ Slide 11: ES6-moduler i Node.js

Tv√• s√§tt att anv√§nda ES6-moduler i Node.js:

Alternativ 1: I package.json, l√§gg till "type": "module"

Alternativ 2: Anv√§nd .mjs-fil√§ndelse

